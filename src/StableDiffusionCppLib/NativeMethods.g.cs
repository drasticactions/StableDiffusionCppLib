// <auto-generated>
// This code is generated by csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
#pragma warning disable CS8500
#pragma warning disable CS8981
using System;
using System.Runtime.InteropServices;


namespace StableDiffusionCppLib
{
    internal static unsafe partial class NativeMethods
    {
        const string __DllName = "stable-diffusion";



        [DllImport(__DllName, EntryPoint = "memchr", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* memchr(void* __s, int __c, CULong __n);

        [DllImport(__DllName, EntryPoint = "memcmp", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int memcmp(void* __s1, void* __s2, CULong __n);

        [DllImport(__DllName, EntryPoint = "memcpy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* memcpy(void* __dst, void* __src, CULong __n);

        [DllImport(__DllName, EntryPoint = "memmove", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* memmove(void* __dst, void* __src, CULong __len);

        [DllImport(__DllName, EntryPoint = "memset", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* memset(void* __b, int __c, CULong __len);

        [DllImport(__DllName, EntryPoint = "strcat", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* strcat(byte* __s1, byte* __s2);

        [DllImport(__DllName, EntryPoint = "strchr", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* strchr(byte* __s, int __c);

        [DllImport(__DllName, EntryPoint = "strcmp", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int strcmp(byte* __s1, byte* __s2);

        [DllImport(__DllName, EntryPoint = "strcoll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int strcoll(byte* __s1, byte* __s2);

        [DllImport(__DllName, EntryPoint = "strcpy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* strcpy(byte* __dst, byte* __src);

        [DllImport(__DllName, EntryPoint = "strcspn", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern CULong strcspn(byte* __s, byte* __charset);

        [DllImport(__DllName, EntryPoint = "strerror", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* strerror(int __errnum);

        [DllImport(__DllName, EntryPoint = "strlen", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern CULong strlen(byte* __s);

        [DllImport(__DllName, EntryPoint = "strncat", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* strncat(byte* __s1, byte* __s2, CULong __n);

        [DllImport(__DllName, EntryPoint = "strncmp", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int strncmp(byte* __s1, byte* __s2, CULong __n);

        [DllImport(__DllName, EntryPoint = "strncpy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* strncpy(byte* __dst, byte* __src, CULong __n);

        [DllImport(__DllName, EntryPoint = "strpbrk", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* strpbrk(byte* __s, byte* __charset);

        [DllImport(__DllName, EntryPoint = "strrchr", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* strrchr(byte* __s, int __c);

        [DllImport(__DllName, EntryPoint = "strspn", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern CULong strspn(byte* __s, byte* __charset);

        [DllImport(__DllName, EntryPoint = "strstr", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* strstr(byte* __big, byte* __little);

        [DllImport(__DllName, EntryPoint = "strtok", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* strtok(byte* __str, byte* __sep);

        [DllImport(__DllName, EntryPoint = "strxfrm", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern CULong strxfrm(byte* __s1, byte* __s2, CULong __n);

        [DllImport(__DllName, EntryPoint = "strtok_r", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* strtok_r(byte* __str, byte* __sep, byte** __lasts);

        [DllImport(__DllName, EntryPoint = "strerror_r", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int strerror_r(int __errnum, byte* __strerrbuf, nuint __buflen);

        [DllImport(__DllName, EntryPoint = "strdup", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* strdup(byte* __s1);

        [DllImport(__DllName, EntryPoint = "memccpy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* memccpy(void* __dst, void* __src, int __c, CULong __n);

        [DllImport(__DllName, EntryPoint = "stpcpy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* stpcpy(byte* __dst, byte* __src);

        [DllImport(__DllName, EntryPoint = "stpncpy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* stpncpy(byte* __dst, byte* __src, CULong __n);

        [DllImport(__DllName, EntryPoint = "strndup", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* strndup(byte* __s1, CULong __n);

        [DllImport(__DllName, EntryPoint = "strnlen", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern nuint strnlen(byte* __s1, nuint __n);

        [DllImport(__DllName, EntryPoint = "strsignal", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* strsignal(int __sig);

        [DllImport(__DllName, EntryPoint = "memset_s", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int memset_s(void* __s, CULong __smax, int __c, CULong __n);

        [DllImport(__DllName, EntryPoint = "memmem", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* memmem(void* __big, nuint __big_len, void* __little, nuint __little_len);

        [DllImport(__DllName, EntryPoint = "memset_pattern4", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void memset_pattern4(void* __b, void* __pattern4, nuint __len);

        [DllImport(__DllName, EntryPoint = "memset_pattern8", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void memset_pattern8(void* __b, void* __pattern8, nuint __len);

        [DllImport(__DllName, EntryPoint = "memset_pattern16", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void memset_pattern16(void* __b, void* __pattern16, nuint __len);

        [DllImport(__DllName, EntryPoint = "strcasestr", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* strcasestr(byte* __big, byte* __little);

        [DllImport(__DllName, EntryPoint = "strnstr", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* strnstr(byte* __big, byte* __little, nuint __len);

        [DllImport(__DllName, EntryPoint = "strlcat", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern CULong strlcat(byte* __dst, byte* __source, CULong __size);

        [DllImport(__DllName, EntryPoint = "strlcpy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern CULong strlcpy(byte* __dst, byte* __source, CULong __size);

        [DllImport(__DllName, EntryPoint = "strmode", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void strmode(int __mode, byte* __bp);

        [DllImport(__DllName, EntryPoint = "strsep", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* strsep(byte** __stringp, byte* __delim);

        [DllImport(__DllName, EntryPoint = "swab", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void swab(void* arg1, void* arg2, nint arg3);

        [DllImport(__DllName, EntryPoint = "timingsafe_bcmp", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int timingsafe_bcmp(void* __b1, void* __b2, nuint __len);

        [DllImport(__DllName, EntryPoint = "strsignal_r", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int strsignal_r(int __sig, byte* __strsignalbuf, nuint __buflen);

        [DllImport(__DllName, EntryPoint = "bcmp", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int bcmp(void* arg1, void* arg2, CULong arg3);

        [DllImport(__DllName, EntryPoint = "bcopy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void bcopy(void* arg1, void* arg2, nuint arg3);

        [DllImport(__DllName, EntryPoint = "bzero", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void bzero(void* arg1, CULong arg2);

        [DllImport(__DllName, EntryPoint = "index", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* index(byte* arg1, int arg2);

        [DllImport(__DllName, EntryPoint = "rindex", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* rindex(byte* arg1, int arg2);

        [DllImport(__DllName, EntryPoint = "ffs", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ffs(int arg1);

        [DllImport(__DllName, EntryPoint = "strcasecmp", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int strcasecmp(byte* arg1, byte* arg2);

        [DllImport(__DllName, EntryPoint = "strncasecmp", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int strncasecmp(byte* arg1, byte* arg2, CULong arg3);

        [DllImport(__DllName, EntryPoint = "ffsl", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ffsl(CLong arg1);

        [DllImport(__DllName, EntryPoint = "ffsll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int ffsll(long arg1);

        [DllImport(__DllName, EntryPoint = "fls", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int fls(int arg1);

        [DllImport(__DllName, EntryPoint = "flsl", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int flsl(CLong arg1);

        [DllImport(__DllName, EntryPoint = "flsll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int flsll(long arg1);

        [DllImport(__DllName, EntryPoint = "sd_type_name", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* sd_type_name(uint type_);

        [DllImport(__DllName, EntryPoint = "sd_set_log_callback", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void sd_set_log_callback(delegate* unmanaged[Cdecl]<uint, byte*, void*, void> sd_log_cb, void* data);

        [DllImport(__DllName, EntryPoint = "sd_set_progress_callback", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void sd_set_progress_callback(delegate* unmanaged[Cdecl]<int, int, float, void*, void> cb, void* data);

        [DllImport(__DllName, EntryPoint = "get_num_physical_cores", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int get_num_physical_cores();

        [DllImport(__DllName, EntryPoint = "sd_get_system_info", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* sd_get_system_info();

        [DllImport(__DllName, EntryPoint = "new_sd_ctx", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern sd_ctx_t* new_sd_ctx(byte* model_path, byte* vae_path, byte* taesd_path, byte* control_net_path_c_str, byte* lora_model_dir, byte* embed_dir_c_str, byte* stacked_id_embed_dir_c_str, [MarshalAs(UnmanagedType.U1)] bool vae_decode_only, [MarshalAs(UnmanagedType.U1)] bool vae_tiling, [MarshalAs(UnmanagedType.U1)] bool free_params_immediately, int n_threads, uint wtype, uint rng_type, uint s, [MarshalAs(UnmanagedType.U1)] bool keep_clip_on_cpu, [MarshalAs(UnmanagedType.U1)] bool keep_control_net_cpu, [MarshalAs(UnmanagedType.U1)] bool keep_vae_on_cpu);

        [DllImport(__DllName, EntryPoint = "free_sd_ctx", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void free_sd_ctx(sd_ctx_t* sd_ctx);

        [DllImport(__DllName, EntryPoint = "txt2img", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern sd_image_t* txt2img(sd_ctx_t* sd_ctx, byte* prompt, byte* negative_prompt, int clip_skip, float cfg_scale, int width, int height, uint sample_method, int sample_steps, long seed, int batch_count, sd_image_t* control_cond, float control_strength, float style_strength, [MarshalAs(UnmanagedType.U1)] bool normalize_input, byte* input_id_images_path);

        [DllImport(__DllName, EntryPoint = "img2img", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern sd_image_t* img2img(sd_ctx_t* sd_ctx, sd_image_t init_image, byte* prompt, byte* negative_prompt, int clip_skip, float cfg_scale, int width, int height, uint sample_method, int sample_steps, float strength, long seed, int batch_count);

        [DllImport(__DllName, EntryPoint = "img2vid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern sd_image_t* img2vid(sd_ctx_t* sd_ctx, sd_image_t init_image, int width, int height, int video_frames, int motion_bucket_id, int fps, float augmentation_level, float min_cfg, float cfg_scale, uint sample_method, int sample_steps, float strength, long seed);

        [DllImport(__DllName, EntryPoint = "new_upscaler_ctx", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern upscaler_ctx_t* new_upscaler_ctx(byte* esrgan_path, int n_threads, uint wtype);

        [DllImport(__DllName, EntryPoint = "free_upscaler_ctx", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void free_upscaler_ctx(upscaler_ctx_t* upscaler_ctx);

        [DllImport(__DllName, EntryPoint = "upscale", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern sd_image_t upscale(upscaler_ctx_t* upscaler_ctx, sd_image_t input_image, uint upscale_factor);

        [DllImport(__DllName, EntryPoint = "convert", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        public static extern bool convert(byte* input_path, byte* vae_path, byte* output_path, uint output_type);

        [DllImport(__DllName, EntryPoint = "preprocess_canny", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern byte* preprocess_canny(byte* img, int width, int height, float high_threshold, float low_threshold, float weak, float strong, [MarshalAs(UnmanagedType.U1)] bool inverse);


    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct sd_image_t
    {
        public uint width;
        public uint height;
        public uint channel;
        public byte* data;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct sd_ctx_t
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct upscaler_ctx_t
    {
        public fixed byte _unused[1];
    }



}
